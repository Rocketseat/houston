import { DynamicTool } from 'langchain/tools'

export const getLessonData = new DynamicTool({
  name: 'get-lesson-data',
  description:
    'Útil quando você precisa responder perguntas sobre a aula atual. Retorna a transcrição da aula atual.',
  func: async () => {
    return 'Bora lá então começar a falar um pouquinho sobre o Redux, uma das bibliotecas mais famosas do ecossistema React. O Redux é a ferramenta de gerenciamento de estado mais antiga que a gente tem dentro da comunidade React e consequentemente muitos projetos que você for dar manutenção ao longo da sua carreira como programador ou programadora front-end podem estar utilizando o Redux, principalmente se forem projetos mais antigos e é por isso que a gente está conversando um pouquinho sobre o Redux mas calma, não necessariamente quer dizer que o Redux não possa ser utilizado em novos projetos React. O grande diferencial de Redux da maneira que ele era utilizado antigamente para como ele vai ser utilizado hoje em dia nas aplicações é o tanto de complexidade que a gente precisa utilizar para escrever, para utilizar o Redux dentro da nossa aplicação React e aqui eu vou te mostrar durante as próximas aulas um pouquinho de como o Redux se tornou uma ferramenta muito mais simples do que ela era antigamente. Mas antes de mais nada, o que é o Redux? Para a gente entender um pouquinho de fundamentos dessa ferramenta, o que ela se compara, quais são as alternativas, como funciona essa ferramenta. O Redux nada mais é de como eu falei antes, uma ferramenta de gerenciamento de estado. Quando a gente fala sobre estado no React, a gente tem que pensar que é toda informação que é armazenada com o propósito de exibir alguma informação em tela ou manipular alguma ação que o usuário faz para exibir alguma informação em tela. React é uma ferramenta altamente reativa, ou seja, dado as informações que a gente possui dentro do estado da nossa aplicação e o estado pode ser aquele estado que a gente tem no componente diretamente ou o estado que a gente tem compartilhado entre vários componentes, como a gente já conhece da Context API dentro do React. Dado essas informações, conforme elas alteram, a gente exibe coisas diferentes na interface. A gente exibe um pedaço da interface que não estava exibido antes, a gente mostra um usuário logado, a gente mostra uma mensagem de login. Ou seja, dado o estado da nossa aplicação, a gente precisa exibir coisas diferentes na interface. E o Redux é uma ferramenta que, diferente do estado tradicional do React, onde a gente tem pequenas partezinhas de estado compostas dentro de componentes minúsculos dentro da nossa aplicação, ele difere desse conceito trazendo uma proposta de estado global na nossa aplicação. O que é o estado global? O Redux traz essa ideia onde a gente, além de poder ter esses estados em cada componente da nossa aplicação, a gente possa ter também um grande estado chamado de Store, que é compartilhado entre toda a aplicação. E geralmente esse estado pode ser acessado por todos os componentes da nossa aplicação. A grande ideia por trás desse estado compartilhado entre todos os componentes é criar a ideia de uma centralização de estado e uma forma que a gente possa fazer com que toda a aplicação possa ter acesso a todas as informações e fazer modificações em todos os componentes ao mesmo tempo. E isso, por muitas vezes, foi necessário, porque a Context API do React, até o ano de 2017, 2018, ela era muito precária, ela era muito ruim, muito difícil de trabalhar, principalmente na época que a gente trabalhava com classes dentro do React. Ou seja, a gente não tinha uma ferramenta oficial do time do React, a não ser o próprio Redux, para fazer esse compartilhamento de informações entre vários componentes da nossa aplicação. E por isso que o Redux se tornou uma ferramenta muito famosa, porque ele permitia a gente fazer esse compartilhamento de dados entre todos os componentes da nossa aplicação de uma forma muito mais simples do que o React fornecia com a antiga Context API, que não é a que a gente tem hoje. Tá, Diego, então quer dizer que com a Context API que eu tenho hoje, eu não preciso mais do Redux? Na verdade, não. Não é isso. Porque muita gente confunde a Context API com o Redux, simplesmente porque com ambos a gente pode fazer compartilhamento de informações entre mais componentes. Mas existe uma grande diferença entre a Context API e o Redux, que é exatamente o Redux ser uma ferramenta de gerenciamento de estado, enquanto a Context API é simplesmente uma forma da gente compartilhar informações entre componentes. Tá, Diego, mas qual que é a diferença? Quando a gente usa uma ferramenta de gerenciamento de estado, a grande ideia é que a gente tenha uma arquitetura para a gente trabalhar com o histórico do nosso estado, com a timeline do nosso estado, a linha do tempo, ou seja, uma forma mais arquitetada da gente realizar alterações no estado, dado ações que o usuário realiza. Enquanto a Context API, a gente simplesmente tem uma informação que é compartilhada entre todos os componentes, e aí a gente tem que criar portas de entrada para fazer alterações nessa informação, e a gente vai entender. A grande, talvez, forma da gente comparar o que seria mais comparável do Redux com a Context API é se a gente criar um contexto e dentro desse contexto a gente utilizar o hook do React do useReducer. O useReducer, que é um hook do React bem famoso, que é tipo um useState, porém um pouquinho mais trabalhado, ele é totalmente baseado no Redux, tanto que no Redux a gente vai conhecer o conceito de reducers, e a grande ideia é que o useReducer traz uma forma da gente criar um reducer, que é exatamente uma estrutura para a gente fazer um gerenciamento de estado local dentro do nosso componente. Então, o que se assemelha mais ao Redux seria uma combinação de Context API junto com o useReducer. E como eu falei, o Redux foi uma ferramenta que se tornou muito popular antigamente, porque a gente não tinha muita padronização dentro do React, nem provinda do próprio time do React, de como a gente trabalhava com essas informações que a gente precisava compartilhar entre vários componentes da nossa aplicação. E aí uma das coisas que eu gostaria até de antecipar para você, antes da gente sair codando, porque quando a gente sair codando você vai entender muito mais para o que que serve o Redux, e como que a gente coda com o Redux, mas a gente tem geralmente numa aplicação front-end, três tipos de estado. A gente tem o estado local, o estado global e o estado do servidor, que é muito importante a gente entender. Estado local, geralmente, é aquela informação, aquela variável que a gente salva dentro de um componente específico. Então, imagina que eu tenha um componente de abas e eu quero salvar qual que é a aba ativa. Então, eu tenho um estado ali que armazena qual que é a aba que o usuário clicou para mostrar qual aba está aberta, qual aba está selecionada. Então, isso a gente chama de local state. O global state, por outro lado, já é aquele estado que eu preciso compartilhar entre toda a minha aplicação, ou pela grande maioria dos componentes da minha aplicação. Aqui a gente pode pensar, por exemplo, o estado do usuário logado. Então, eu quero compartilhar a informação do usuário que está logado na nossa aplicação com todos os componentes. Assim, eu posso mostrar coisas diferentes ali em tela, dado a informação se o usuário está logado ou não, dado o nome, e-mail do usuário, essas informações que são públicas. Então, global state e local state. E a gente tem um terceiro state que é muito comum nas aplicações front-end, que é o server state. Isso aqui significa, toda vez que eu faço uma requisição para o back-end, para buscar alguma informação, uma lista de dados, uma informação única, o detalhe de alguma informação, algum registro do banco de dados, esse dado que é retornado para a gente, geralmente a gente salva dentro de um estado também. Porque no estado, quando a gente salva essa informação no estado, dada as alterações que a gente faz nesse estado, a interface responde a essa informação. Ou seja, a gente tem três tipos de state dentro do React. A gente tem o UI state, que é todo o estado usado para mudar a interface, e aí entra o local state e o global, o local que é dentro dos componentes e o global. E nós temos o HTTP state, o server state, que é o estado que é provindo das requisições que a gente faz para o back-end. E aqui eu só estou trazendo essas três comparações porque, antigamente, a gente usava o Redux praticamente para esses dois carinhas aqui. Então, antigamente, como o React não tinha muita padronização de como a gente fazia requisições HTTP para o back-end, se a gente usava a Axis, se a gente não utilizava, se a gente utilizava o Redux para isso, ou seja, antigamente o React, a comunidade, era uma terra sem lei. Então, a gente usava o Redux praticamente para tudo, tanto para a parte de estado global da nossa aplicação, quanto também para a parte de server state, ou seja, para fazer requisições HTTP para o back-end, tanto também, muitas vezes, até para local state. Ou seja, a gente acabava usando o Redux de forma desnecessária, muitas vezes de forma intensiva para todo tipo de estado aqui dentro do React. Porém, hoje, com os conceitos muito mais bem definidos dentro da comunidade, a gente usaria o Redux somente para o estado global, ou seja, se eu tiver alguma informação que eu quero compartilhar entre todos os componentes. E aí, para o local state, a gente usaria o próprio state do React, o próprio use state do React, a gente pode usar também a context API aqui nesses casos, ou até JTAI, por exemplo, alguma outra alternativa, tem também aqui o recoil, tem algumas outras alternativas de gerenciamento de estado que a gente poderia usar aqui. Enquanto para o server state, muitas vezes, agora, a gente está usando algumas ferramentas. Se você está usando o Next na sua versão 13, ele já lida com isso automaticamente, mas se você está criando uma aplicação React sem o uso de um framework, existem ferramentas como o próprio React Query, SWR, o próprio Redux Toolkit também, que é uma ferramenta que integra com o Redux, que é exatamente para gerenciar server state, ou seja, gerenciar as informações que são providas do back-end ali dentro do front-end, uma forma da gente manter essas informações compartilhadas entre os componentes. Então, o Redux, ele, digamos, tem o seu lugar muito mais bem definido hoje em dia comparado com antigamente. Mesmo assim, a gente tem alternativas para a gente trabalhar com o gerenciamento de estado dentro de aplicações React, que por muitas vezes ainda podem ser melhores do que trabalhar com o Redux. A gente não precisa forçar a utilização do Redux em todas as nossas aplicações. E aqui alguns exemplos. A gente pode utilizar um combo de context API junto com useReducer para ter um resultado semelhante ao que o Redux faz, só que muito mais simples e um pouco até mais limitado que o Redux. Mas a gente tem algumas ferramentas que têm o propósito de trazer um funcionamento de gerenciamento de estado de uma maneira mais simples. O Zustand, que é uma ferramenta que a gente vai ver também ao longo das próximas aulas, ela é totalmente comparável ao Redux e ela tem a ideia de trazer um Redux muito mais simplificado, muito mais simples de utilizar, muito mais leve. A gente vai conhecer o que é o Zustand, mas o propósito é muito semelhante ao Redux, por isso que a gente vai ver essas duas ferramentas aqui ao longo dessas aulas. E a gente tem o Jotai. O Jotai é uma ferramenta que eu gosto muito. Inclusive ela é criada pelo próprio criador do Zustand, que ela tem o objetivo de substituir a context API. Qual que é a grande diferença da gente usar context API ou Jotai comparado com usar Redux e Zustand, que são os comparáveis aqui? Quando a gente usa o Redux ou o Zustand, a ideia é que a gente tem um estado global, um estado centralizado, que ele pode ser compartilhado em toda a aplicação. Enquanto, quando a gente usa context API ou o Jotai, a gente tem vários estados. A gente tem vários pequeninos estados compartilhados entre alguns componentes da nossa aplicação. Então, quando a gente usa o Jotai ou a context API, a ideia é que a gente tenha pedacinhos de estado dado os componentes que a gente precisa que tenham acesso àquelas informações. Enquanto quando a gente usa o Redux ou o Zustand, a gente tem apenas um grande estado, que a gente chama de store, compartilhado entre toda a aplicação, como bem já falei. E aí a gente precisa entender um pouquinho como que funciona a arquitetura do Redux e também é muito semelhante à arquitetura que o Zustand usa, que é a arquitetura Flux, que ficou também muito famosa no ecossistema React lá no comecinho de tudo, lá em 2016, 2017, 2018, até chegar depois a context API e começar a tirar um pouco isso da comunidade, principalmente para iniciantes. Mas a arquitetura Flux funciona da seguinte forma. A gente tem os nossos componentes, a gente chama isso na camada de view, e esses componentes, sempre que eles querem fazer algum tipo de alteração nesse estado, pensando que é um estado global, eles precisam disparar uma ação. Essa ação, ela nada mais é do que uma função que diz exatamente o que o usuário está querendo fazer. Então, adicionar um produto ao carrinho, calcular o preço de um frete, ou seja, é uma ação disparada através de um clique do usuário em algum botão, qualquer coisa assim, a gente já está acostumado, é uma action, é uma função, como qualquer outra. Essa função por si só, ela não faz nada, ela não é uma função que vai fazer uma alteração no estado.'
  },
})
